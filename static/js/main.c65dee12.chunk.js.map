{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","className","s","form","e","preventDefault","type","pattern","title","required","onChange","input","btn","ContactList","contacts","onDeleteContact","list","map","id","listItem","onClick","Filter","label","placeholder","defaultContacts","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","duplicate","find","contact","alert","shortid","generate","prevState","currentTarget","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c65dee12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1NIrA\",\"input\":\"Filter_input__3rbqC\"};","\r\nimport {useState} from \"react\";\r\nimport s from './ContactForm.module.css';\r\nexport default function ContactForm({onSubmit}) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n        onSubmit(name,number);\r\n        setName('');\r\n        setNumber('');\r\n        \r\n    };\r\n\r\n    return (\r\n        <form className={s.form} onSubmit={handleSubmit}>\r\n            <label>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={name}\r\n                    className={s.input} />\r\n            </label>\r\n            <label>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={number}\r\n                    className={s.input} />\r\n            </label>\r\n            <button type=\"submit\" className={s.btn}>Add contact</button>\r\n        </form>\r\n    )\r\n}\r\n// class ContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     }\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({ [name]: value, })\r\n\r\n//     };\r\n//    handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n//     this.setState({ name: \"\", number: \"\" });\r\n\r\n//     };\r\n\r\n\r\n//       render() {\r\n//         return (\r\n\r\n        //         <form className = {s.form} onSubmit ={ this.handleSubmit}>\r\n        //             <label>\r\n        //                 Name\r\n        //                 <input\r\n        //                     type=\"text\"\r\n        //                     name=\"name\"\r\n        //                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        //                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        //                     required\r\n        //                     onChange={this.handleChange}\r\n        //                     value={this.state.name}\r\n        //                     className ={s.input} />\r\n        //             </label>\r\n        //               <label>\r\n        //                 Number\r\n        //                 <input\r\n        //                     type=\"tel\"\r\n        //                     name=\"number\"\r\n        //                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        //                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        //                     required\r\n        //                     onChange={this.handleChange}\r\n        //                     value={this.state.number}\r\n        //                     className ={s.input} />\r\n        //             </label>\r\n        //              <button type=\"submit\" className={s.btn}>Add contact</button>\r\n        //         </form>\r\n\r\n\r\n        // )\r\n//     }\r\n// }\r\n// export default ContactForm","\r\nimport s from './ContactList.module.css'\r\n\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n  <ul className={s.list}>\r\n      {contacts.map(({id,name,number }) => (\r\n        <li className={s.listItem} key={id}>\r\n          {`${name}: ${number}`}\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n\r\n","import s from \"./Filter.module.css\";\r\n\r\nexport default function Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Filter\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Enter some letters to search\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n}","import  { useState,useEffect } from 'react';\nimport ContactForm from './components/ContactForm';\nimport shortid from 'shortid';\nimport s from './App.module.css';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst defaultContacts= [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    { id: 'id-5', name: 'Alex Baran', number: '067-21-51' },\n    ]\n\nexport default function App() {\n\n  const [contacts, setContacts] = useState(JSON.parse(window.localStorage.getItem('contacts')) ?? defaultContacts);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts]);\n    \n  const addContact = (name, number) => {\n    const duplicate = contacts.find((contact) => contact.name === name);\n    if (duplicate) {\n      alert('Такой контакт уже существует!');\n    } else {\n      const contact = {\n        name,\n        number,\n        id: shortid.generate(),\n      };\n\n      setContacts((prevState) => [contact, ...prevState]);\n    }\n  };\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n  const deleteContact = (contactId) => {\n    setContacts((prevState) => prevState.filter((contact) => contact.id !== contactId));\n  };\n\n  return (\n    <>\n      <h1 className={s}>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <h2 className={s}>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </>\n  );\n}\n\n\n\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//       { id: 'id-5', name: 'Alex Baran', number: '067-21-51' },\n//     ],\n//     filter: '',\n//   };\n\n//   addContact = ({ name, number }) => {\n//     let duplicate = this.state.contacts.find(contact => contact.name === name);\n\n//     if (duplicate) {\n//       alert('Такой контакт уже существует!');\n//     } else {\n//       const contact = {\n//         name,\n//         number,\n//         id: shortid.generate(),\n//       };\n\n//       this.setState(prevState => ({\n//         contacts: [...prevState.contacts, contact],\n//       }));\n//     }\n//   };\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parseContacts = JSON.parse(contacts);\n//     if (parseContacts) {\n//       this.setState({ contacts: parseContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('Обновился стейт');\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n//   // onSubmitHandler = data => {\n//   //   console.log(data)\n//   // }\n\n//   render() {\n//     const { filter } = this.state;\n//     const VisibleContacts = this.getVisibleContacts();\n//     return (\n//       <>\n//         <h1 className={s}>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} />\n//         <h2 className={s}>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n//         <ContactList\n//           contacts={VisibleContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n\n// onSubmitData={this.onSubmitHandler}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2xw_Z\",\"btn\":\"ContactForm_btn__5R-J6\",\"input\":\"ContactForm_input__1D-7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__1yxUb\",\"list\":\"ContactList_list__aAk7k\",\"btn\":\"ContactList_btn__17EFh\"};"],"sourceRoot":""}